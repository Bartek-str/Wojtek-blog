{"version":3,"sources":["components/Home/Main/Main.js","components/Home/Main/index.js","components/Home/Categories/Categories.js","components/Home/Categories/index.js","components/Home/Footer/index.js","components/Home/Footer/Footer.js","components/Home/Home.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","className","Categories","useState","coffee","setCoffee","food","setFood","tea","setTea","onClick","Footer","aboutMe","setAboutMe","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAeeA,ICbAA,EDAf,WACI,OACI,oCACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,QAAf,uDACA,yBAAKA,UAAU,YAAf,kC,OEmFLC,ICzFAA,EDAf,WAAuB,IAAD,EACUC,oBAAS,GADnB,mBACXC,EADW,KACHC,EADG,OAEMF,oBAAS,GAFf,mBAEXG,EAFW,KAELC,EAFK,OAGIJ,oBAAS,GAHb,mBAGXK,EAHW,KAGNC,EAHM,KAIlB,OACI,oCACI,yBAAKR,UAAU,eACTG,IAAWE,IAASE,GAClB,oCACI,yBAAKP,UAAU,UACX,oCACA,yBAAKA,UAAU,gBAAgBS,QAAS,kBAAOL,GAAWD,MAC1D,yBAAKH,UAAU,QACX,mEACA,wMACA,mVAGR,yBAAKA,UAAU,OAAOS,QAAS,kBAAOH,GAASD,KAC3C,oDACA,yBAAKL,UAAU,iBACf,yBAAKA,UAAU,QACX,4EACA,mDACA,0PACA,6DACA,sEAGR,yBAAKA,UAAU,MAAMS,QAAS,kBAAOD,GAAQD,KACzC,uCACA,yBAAKP,UAAU,eACf,yBAAKA,UAAU,QACX,iEACA,oJACA,mMAKfG,GACG,yBAAKH,UAAU,SACX,yBAAKA,UAAU,iBAAiBS,QAAS,kBAAOL,GAAWD,KACvD,oCACA,yBAAKH,UAAU,kBACf,yBAAKA,UAAU,QACX,mEACA,wMACA,mVAGR,yBAAKA,UAAU,aAGtBK,GACG,yBAAKL,UAAU,SACX,yBAAKA,UAAU,eAAeS,QAAS,kBAAOH,GAASD,KACnD,oDACA,yBAAKL,UAAU,iBACf,yBAAKA,UAAU,QACX,4EACA,mDACA,0PACA,6DACA,sEAGR,yBAAKA,UAAU,aAGtBO,GACG,yBAAKP,UAAU,SACX,yBAAKA,UAAU,cAAcS,QAAS,kBAAOD,GAAQD,KACjD,uCACA,yBAAKP,UAAU,eACf,yBAAKA,UAAU,QACX,iEACA,oJACA,kMAGR,yBAAKA,UAAU,gBEjFxBU,ECAA,WAAO,IAAD,EACaR,oBAAS,GADtB,mBACVS,EADU,KACDC,EADC,KAEjB,OACI,yBAAKZ,UAAU,WACTW,GACE,oCACI,yBAAKX,UAAU,UAAUS,QAAS,kBAAOG,GAAYD,MACrD,yBAAKX,UAAU,cACf,yBAAKA,UAAU,cAGtBW,GACG,yBAAKX,UAAU,aACX,yBAAKA,UAAU,UAAUS,QAAS,kBAAOG,GAAYD,MACrD,yBAAKX,UAAU,WACX,mdACA,6NACA,mFAEJ,yBAAKA,UAAU,YCNpBa,ICbAA,EDGf,WACI,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QEYGC,MAdf,WACI,OACI,yBAAKd,UAAU,OACX,yBAAKA,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAYJ,SCFtCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe53b827.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Main() {\n    return (\n        <>\n            <div className='main'>\n                <div className='box'>\n                    <div className='text'>Wszystko, co chciałbyś wiedzieć o...</div>\n                    <div className='mainText'>kawie, herbacie i jedzeniu</div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Main;","import Main from \"./Main\";\n\nexport default Main;","import React, {useState} from \"react\";\n\nfunction Categories() {\n    const [coffee, setCoffee] = useState(false);\n    const [food, setFood] = useState(false);\n    const [tea, setTea] = useState(false);\n    return (\n        <>\n            <div className='categories'>\n                {!coffee && !food && !tea && (\n                    <>\n                        <div className='coffee'>\n                            <h1>Kawa</h1>\n                            <div className='coffeeimg img' onClick={() => (setCoffee(!coffee))} />\n                            <div className='text'>\n                                <p>To, co kocham i z czym pracuję.</p>\n                                <p>Nawet nie pomyślałbyś ile jest sposobów jej parzenia, nie wspominając o jej gatunkach, szczepach, sposobach obróbki oraz miejscach pochodzenia.</p>\n                                <p>Czym jest kawa po arabsku, dlaczego \"cafe latte\" tak na prawdę nie istnieje, o czym myśli barista mówiąc, że \"Kercha w dripie na trzysta lepsza na dwa na dziewięćdziesiąt pięć\" oraz dlaczego kawa po polsku była słynna na całą Europę.</p>\n                            </div>\n                        </div>\n                        <div className='food' onClick={() => (setFood(!food))}>\n                            <h1>Jedzenie, wypieki...</h1>\n                            <div className='breadimg img' />\n                            <div className='text'>\n                                <p>Jedzenie... co tu dużo przedstawiać</p>\n                                <p>Każdy je kocha.</p>\n                                <p>Jednak, czy wiesz skąd pochodzi biszkopt? Jak łatwo jest nie marnować produktów w kuchni? Że dobry posiłek wcale nie musi być skomplikowany oraz jak zorganizować swoją kuchnie.</p>\n                                <p>...pssst poznasz sekret matek.</p>\n                                <p>Jak ugotować coś z niczego.</p>\n                            </div>\n                        </div>\n                        <div className='tea' onClick={() => (setTea(!tea))}>\n                            <h1>Herbata</h1>\n                            <div className='teaimg img' />\n                            <div className='text'>\n                                <p>Rozpieszcza smakiem, koi aromatem.</p>\n                                <p>Dziesiątki odmian i plantacji od stuleci zadowalały cesarskie podniebienia a Ty pijesz ekspresówkę?</p>\n                                <p>Po zgłębieniu tego ciekawego tematu raczej odejdziesz od takich rozwiązań bo nie wiesz jeszcze, co skrywają w sobie liście herbaty!</p>\n                            </div>\n                        </div>\n                    </>\n                )}\n                {coffee && (\n                    <div className='posts'>\n                        <div className='coffeeSelected' onClick={() => (setCoffee(!coffee))}>\n                            <h1>Kawa</h1>\n                            <div className='coffeeimg img' />\n                            <div className='text'>\n                                <p>To, co kocham i z czym pracuję.</p>\n                                <p>Nawet nie pomyślałbyś ile jest sposobów jej parzenia, nie wspominając o jej gatunkach, szczepach, sposobach obróbki oraz miejscach pochodzenia.</p>\n                                <p>Czym jest kawa po arabsku, dlaczego \"cafe latte\" tak na prawdę nie istnieje, o czym myśli barista mówiąc, że \"Kercha w dripie na trzysta lepsza na dwa na dziewięćdziesiąt pięć\" oraz dlaczego kawa po polsku była słynna na całą Europę.</p>\n                            </div>\n                        </div>\n                        <div className='numbers' />\n                    </div>\n                )}\n                {food && (\n                    <div className='posts'>\n                        <div className='foodSelected' onClick={() => (setFood(!food))}>\n                            <h1>Jedzenie, wypieki...</h1>\n                            <div className='breadimg img' />\n                            <div className='text'>\n                                <p>Jedzenie... co tu dużo przedstawiać</p>\n                                <p>Każdy je kocha.</p>\n                                <p>Jednak, czy wiesz skąd pochodzi biszkopt? Jak łatwo jest nie marnować produktów w kuchni? Że dobry posiłek wcale nie musi być skomplikowany oraz jak zorganizować swoją kuchnie.</p>\n                                <p>...pssst poznasz sekret matek.</p>\n                                <p>Jak ugotować coś z niczego.</p>\n                            </div>\n                        </div>\n                        <div className='numbers' />\n                    </div>\n                )}\n                {tea && (\n                    <div className='posts'>\n                        <div className='teaSelected' onClick={() => (setTea(!tea))}>\n                            <h1>Herbata</h1>\n                            <div className='teaimg img' />\n                            <div className='text'>\n                                <p>Rozpieszcza smakiem, koi aromatem.</p>\n                                <p>Dziesiątki odmian i plantacji od stuleci zadowalały cesarskie podniebienia a Ty pijesz ekspresówkę?</p>\n                                <p>Po zgłębieniu tego ciekawego tematu raczej odejdziesz od takich rozwiązań bo nie wiesz jeszcze, co skrywają w sobie liście herbaty!</p>\n                            </div>\n                        </div>\n                        <div className='numbers' />\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default Categories;","import Categories from \"./Categories\";\n\nexport default Categories;","import Footer from \"./Footer\";\n\nexport default Footer;","import React, {useState} from \"react\";\n\nconst Footer = () => {\n    const [aboutMe, setAboutMe] = useState(false);\n    return (\n        <div className='Footer'>\n            {!aboutMe && (\n                <>\n                    <div className='myImage' onClick={() => (setAboutMe(!aboutMe))} />\n                    <div className='instagram' />\n                    <div className='podcasts' />\n                </>\n            )}\n            {aboutMe && (\n                <div className='container'>\n                    <div className='myImage' onClick={() => (setAboutMe(!aboutMe))} />\n                    <div className='aboutMe'>\n                        <p>Muzyk, naukowiec, humanista i kucharz. Przez takie połączenie do każdego zagadnienia podchodzę kompleksowo. Nie sztuka jest stworzyć przepis. Potrawę należy zrozumieć, poznać jej historię i społeczne powiązania. Jako naukowiec znajduję nie tylko szczegóły i zależności między składnikami i procesami w kuchni, ale ich podstawy działania. </p>\n                        <p>Na tej stronie raczej nie znajdziecie raczej przepisów sensu stricte. Przedstawiam Wam historie, idee, powiązania oraz naukowe podstawy potraw i napojów z całego świata.</p>\n                        <p>Krótko o sobie? Człowiek renesansu. Syn muz</p>\n                    </div>\n                    <div className='mail'/>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport Main from \"./Main\";\nimport Categories from \"./Categories\";\nimport Footer from \"./Footer\";\n\nfunction Home() {\n    return (\n        <>\n            <Main />\n            <Categories />\n            <Footer />\n        </>\n    );\n}\n\nexport default Home;","import Home from \"./Home\";\n\nexport default Home;","import React from 'react';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from 'react-router-dom';\nimport Home from \"./components/Home\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className='top'>\n                <Router>\n                    <Switch>\n                        <Route exact path='/' component={ Home } />\n                    </Switch>\n                </Router>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}